{"version":3,"sources":["redux/actions.ts","components/CurrencyExchange/CurrencyExchange.tsx","redux/selectors.ts","containers/CurrencyExchangeContainer/CurrencyEContainer.tsx","lessons/lesson1/lesson1.tsx","App.tsx","redux/currencyReducer.ts","redux/state.ts","index.tsx"],"names":["ACTIONS_TYPE","CurrencyExchange","currenciesName","currentCurrency","currencyRate","isBuying","amountOfBYN","amountOfCurrency","changeCurrencyField","changeAction","changeCurrentCurrency","viewCurrency","Fragment","value","data-currency","onChange","className","map","currency","index","onClick","data-action","ChangeCurrencyFieldAC","type","CHANGE_CURRENCY_FIELD_TYPE","payload","ChangeActionAC","CHANGE_CHANGE_ACTION","selectAllValues","state","CurrencyEContainer","props","currencies","useSelector","dispatch","useDispatch","currencyName","buyRate","sellRate","e","currentTarget","isFinite","dataset","trigger","Number","toFixed","action","CHANGE_CURRENT_CURRENCY","Lesson1","App","initialState","reducers","combineReducers","store","createStore","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e812d048.chunk.js","sourcesContent":["export enum ACTIONS_TYPE {\r\n    CHANGE_CURRENCY_FIELD_TYPE = 'CurrencyExchange/CHANGE_CURRENCY_FIELD_TYPE',\r\n    CHANGE_CHANGE_ACTION = 'CurrencyExchange/CHANGE_CHANGE_ACTION',\r\n    CHANGE_CURRENT_CURRENCY = 'CurrencyExchange/CHANGE_CURRENT_CURRENCY',\r\n}\r\n\r\n\r\nexport type ChangeCurrencyFieldType = {\r\n    type: ACTIONS_TYPE.CHANGE_CURRENCY_FIELD_TYPE\r\n    payload: {\r\n        amountOfBYN: string\r\n        amountOfCurrency: string\r\n    }\r\n};\r\n\r\n\r\nexport const ChangeCurrencyFieldAC = (amountOfBYN: string, amountOfCurrency: string): ChangeCurrencyFieldType => ({\r\n    type: ACTIONS_TYPE.CHANGE_CURRENCY_FIELD_TYPE, payload: {amountOfBYN, amountOfCurrency}\r\n});\r\n\r\nexport type ChangeAction = {\r\n    type: ACTIONS_TYPE.CHANGE_CHANGE_ACTION\r\n    payload: {\r\n        isBuying: boolean\r\n    }\r\n};\r\n\r\n\r\nexport const ChangeActionAC = (isBuying: boolean): ChangeAction => ({\r\n    type: ACTIONS_TYPE.CHANGE_CHANGE_ACTION, payload: {isBuying}\r\n});\r\n\r\nexport type ChangeCurrentCurrencyType = {\r\n    type: ACTIONS_TYPE.CHANGE_CURRENT_CURRENCY\r\n    payload: {\r\n        currentCurrency: string\r\n    }\r\n};\r\n\r\n\r\nexport const Ð¡hangeCurrentCurrencyAC = (currentCurrency: string): ChangeCurrentCurrencyType => ({\r\n    type: ACTIONS_TYPE.CHANGE_CURRENT_CURRENCY, payload: {currentCurrency}\r\n});\r\n\r\nexport type CurrencyReducersTypes = ChangeCurrencyFieldType | ChangeAction | ChangeCurrentCurrencyType;","import React from 'react';\r\n\r\ntype CurrencyExchangePropsType = {\r\n    currenciesName: string[];\r\n    currentCurrency: string;\r\n    currencyRate: number;\r\n    isBuying: boolean;\r\n    amountOfBYN: string;\r\n    amountOfCurrency: string;\r\n    changeCurrencyField: (e: React.ChangeEvent<HTMLInputElement>) => void;\r\n    changeAction: (e: React.MouseEvent<HTMLSpanElement>) => void;\r\n    changeCurrentCurrency: (e: React.MouseEvent<HTMLLIElement>) => void;\r\n};\r\n\r\nconst CurrencyExchange: React.FC<CurrencyExchangePropsType> = ({\r\n                                                                                  currenciesName,\r\n                                                                                  currentCurrency,\r\n                                                                                  currencyRate,\r\n                                                                                  isBuying,\r\n                                                                                  amountOfBYN,\r\n                                                                                  amountOfCurrency,\r\n                                                                                  changeCurrencyField,\r\n                                                                                  changeAction,\r\n                                                                                  changeCurrentCurrency,\r\n                                                                              }) => {\r\n    const viewCurrency = isBuying ? (\r\n        <React.Fragment>\r\n            <label>\r\n                You give the next amount of BYN:\r\n                <input value={amountOfBYN} data-currency=\"byn\" onChange={changeCurrencyField} />\r\n            </label>\r\n            <label>\r\n                You get the next amount of {currentCurrency}:\r\n                <input value={amountOfCurrency} data-currency=\"currency\" onChange={changeCurrencyField} />\r\n            </label>\r\n        </React.Fragment>\r\n    ) : (\r\n        <React.Fragment>\r\n            <label>\r\n                You give the next amount of {currentCurrency}:\r\n                <input value={amountOfCurrency} data-currency=\"currency\" onChange={changeCurrencyField} />\r\n            </label>\r\n            <label>\r\n                You get the next amount of BYN:\r\n                <input value={amountOfBYN} data-currency=\"byn\" onChange={changeCurrencyField} />\r\n            </label>\r\n        </React.Fragment>\r\n    );\r\n\r\n    return (\r\n        <div className=\"currency\">\r\n            <h2>Currency exchange</h2>\r\n            <div className=\"currency-names\">\r\n                <p>Current currency:</p>\r\n                <ul>\r\n                    {currenciesName.map((currency: string, index: number) => {\r\n                        return (\r\n                            <li\r\n                                key={`${index}-${currency}`}\r\n                                className={`currencies ${currentCurrency === currency ? 'activeCurrency' : null}`}\r\n                                onClick={changeCurrentCurrency}\r\n                                data-currency={currency}\r\n                            >\r\n                                {currency}\r\n                            </li>\r\n                        );\r\n                    })}\r\n                </ul>\r\n            </div>\r\n            <div className=\"currency-action\">\r\n        <span className={isBuying ? 'active' : ''} data-action=\"buy\" onClick={changeAction}>\r\n          Buy\r\n        </span>\r\n                <span className={isBuying ? '' : 'active'} data-action=\"sell\" onClick={changeAction}>\r\n          Sell\r\n        </span>\r\n            </div>\r\n            <div className=\"fields\">\r\n                <p>Currency rate: {currencyRate}</p>\r\n                {viewCurrency}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CurrencyExchange;\r\n","import { IGlobalState} from './state';\r\n\r\ninterface IRootState extends IGlobalState {}\r\n\r\nexport const selectAllValues = (state: IRootState) => state.currency;\r\nexport const selectCurrentCurency = (state: IRootState) => state.currency.currentCurrency;","import React from 'react';\r\nimport CurrencyExchange from '../../components/CurrencyExchange/CurrencyExchange';\r\nimport {CurrencyType} from '../../redux/currencyReducer';\r\nimport {\r\n  ChangeActionAC,\r\n  ChangeCurrencyFieldAC,\r\n  Ð¡hangeCurrentCurrencyAC\r\n} from '../../redux/actions';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {selectAllValues} from \"../../redux/selectors\";\r\n\r\nconst CurrencyEContainer: React.FC = props => {\r\n\r\n  let currencies = useSelector(selectAllValues)\r\n  let dispatch = useDispatch()\r\n\r\n  let currencyRate: number = 0;\r\n  const currenciesName = currencies.currencies.map((currency: CurrencyType) => {\r\n    if (currency.currencyName === currencies.currentCurrency) {\r\n      currencyRate = currencies.isBuying ? currency.buyRate : currency.sellRate;\r\n    }\r\n    return currency.currencyName;\r\n  });\r\n\r\n  const changeCurrencyField = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    let value = e.currentTarget.value;\r\n    if (!isFinite(+value)) return;\r\n    if (e.currentTarget.dataset.currency) {\r\n      const trigger: string = e.currentTarget.dataset.currency;\r\n      if (trigger === 'byn') {\r\n        if (value === '') {\r\n          dispatch(ChangeCurrencyFieldAC(value, value));\r\n        } else {\r\n          dispatch(ChangeCurrencyFieldAC(value, (+Number(value).toFixed(2) / currencyRate).toFixed(2)));\r\n        }\r\n      } else {\r\n        if (value === '') {\r\n          dispatch(ChangeCurrencyFieldAC(value, value));\r\n        } else {\r\n          dispatch(ChangeCurrencyFieldAC((+Number(value).toFixed(2) * currencyRate).toFixed(2), value));\r\n        }\r\n      }\r\n    }\r\n  };\r\n  const changeAction = (e: React.MouseEvent<HTMLSpanElement>) => {\r\n    e.currentTarget.dataset.action === 'buy' ? dispatch(ChangeActionAC(true)) : dispatch(ChangeActionAC(false));\r\n  };\r\n\r\n  const changeCurrentCurrency = (e: React.MouseEvent<HTMLLIElement>) => {\r\n    e.currentTarget.dataset.currency && dispatch(Ð¡hangeCurrentCurrencyAC(e.currentTarget.dataset.currency));\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <CurrencyExchange\r\n        currenciesName={currenciesName}\r\n        currentCurrency={currencies.currentCurrency}\r\n        currencyRate={currencyRate}\r\n        isBuying={currencies.isBuying}\r\n        amountOfBYN={currencies.amountOfBYN}\r\n        amountOfCurrency={currencies.amountOfCurrency}\r\n        changeCurrencyField={changeCurrencyField}\r\n        changeAction={changeAction}\r\n        changeCurrentCurrency={changeCurrentCurrency}\r\n      />\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default CurrencyEContainer;\r\n\r\n","import React from 'react';\nimport CurrencyExchangeContainer from '../../containers/CurrencyExchangeContainer/CurrencyEContainer'\n\n// Redux\n// https://tproger.ru/translations/redux-for-beginners/\n// https://monsterlessons.com/project/series/redux-js-dlya-nachinayushih\n// https://xsltdev.ru/react/redux/intro/\n\n// Typescript genetic\n// https://habr.com/ru/post/455473/\n// https://habr.com/ru/company/ruvds/blog/426729/\n\n// Typescript from zero + typescript generic (English video)\n// https://www.youtube.com/watch?v=3d9XqFmCmQw\n\n// Container component\n// https://habr.com/ru/company/ruvds/blog/446206/\n\n// Dispatch\n// https://react-redux.js.org/using-react-redux/connect-mapdispatch\n\nconst Lesson1: React.FunctionComponent = () => {\n    return (\n    <React.Fragment>\n        <CurrencyExchangeContainer />\n    </React.Fragment>\n  );\n};\n\nexport default Lesson1;\n\n","import React from 'react';\r\nimport './App.css';\r\nimport Lesson1 from './lessons/lesson1/lesson1';\r\n// import './lessons/lesson2/lesson2';\r\n// import Lesson3 from './lessons/lesson3/Lesson3';\r\n// import Lesson4 from './lessons/lesson4/Lesson4';\r\n// import './lessons/lesson5/lesson5';\r\n// import './lessons/lesson6/lesson6';\r\n// import './lessons/lesson7/lesson7';\r\n// import './lessons/lesson8/lesson8';\r\n\r\nfunction App() {\r\n    return (\r\n        <div className=\"container\">\r\n            <Lesson1 />\r\n            {/*<Lesson3 />*/}\r\n            {/*<Lesson4 />*/}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import {ACTIONS_TYPE, CurrencyReducersTypes} from './actions';\r\n\r\n\r\nexport type CurrencyType = {\r\n    currencyName: string;\r\n    buyRate: number;\r\n    sellRate: number;\r\n};\r\nexport type CurrencyState = {\r\n    currencies: Array<CurrencyType>;\r\n    currentCurrency: string;\r\n    isBuying: boolean;\r\n    amountOfBYN: string;\r\n    amountOfCurrency: string;\r\n};\r\n\r\nconst initialState: CurrencyState = {\r\n    currencies: [\r\n        {\r\n            currencyName: 'USD',\r\n            buyRate: 2.62,\r\n            sellRate: 2.58,\r\n        },\r\n        {\r\n            currencyName: 'EUR',\r\n            buyRate: 3.1,\r\n            sellRate: 3.06,\r\n        },\r\n        {\r\n            currencyName: 'RUR',\r\n            buyRate: 0.0345,\r\n            sellRate: 0.0341,\r\n        },\r\n    ],\r\n    currentCurrency: 'USD',\r\n    isBuying: true,\r\n    amountOfBYN: '',\r\n    amountOfCurrency: '',\r\n};\r\n\r\nexport const currencyReducer = (state: CurrencyState = initialState, action: CurrencyReducersTypes): CurrencyState => {\r\n    switch (action.type) {\r\n        case ACTIONS_TYPE.CHANGE_CURRENCY_FIELD_TYPE:\r\n            return {\r\n                ...state,\r\n                amountOfBYN: action.payload.amountOfBYN,\r\n                amountOfCurrency: action.payload.amountOfCurrency\r\n            }\r\n        case ACTIONS_TYPE.CHANGE_CHANGE_ACTION:\r\n            return {\r\n                ...state,\r\n                isBuying: action.payload.isBuying\r\n            }\r\n        case ACTIONS_TYPE.CHANGE_CURRENT_CURRENCY:\r\n            return {\r\n                ...state,\r\n                currentCurrency: action.payload.currentCurrency\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n","import { combineReducers, createStore } from \"redux\";\r\nimport { currencyReducer } from './currencyReducer';\r\n\r\nconst reducers = combineReducers({\r\n    currency: currencyReducer,\r\n});\r\nexport type IGlobalState = ReturnType<typeof reducers>;\r\n\r\nexport const store = createStore(reducers);","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport { Provider } from 'react-redux';\r\nimport { store } from './redux/state';\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App />\r\n    </Provider>,\r\n    document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}